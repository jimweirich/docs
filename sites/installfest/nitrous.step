message <<-MARKDOWN
These instructions should be sufficient to prepare you to create your first Rails app on Nitrous.io.
MARKDOWN

step "Create a Nitrous.io Account" do

  message <<-MARKDOWN
  Go to <https://www.nitrous.io/> and click on the "Sign Up for Free" button.

  Enter a username, your email address and a password.

  Click on the "Sign Up" button.

  Check your email and follow the steps in the account activation email you receive from Nitrous.io.

  MARKDOWN
end

step "Configure your Nitrous Box" do
  message <<-MARKDOWN
  Browse the intro screens by clicking on the "Next" button until you reach the "Okay, I'm Ready!" button and click on it.

  Click on the "Ruby/Rails" button. Note that there may be no visual change to the screen since "Ruby/Rails" is the default selection.

  Choose a name for your box and select the closest geographical location to your current location.

  Do not change the remainder of the options to ensure your account remains free.

  Click on the "Create Box" button.
  MARKDOWN

  tip do
    message "When you launch your Nitous IDE you should see a screen that looks like this:"
    img src: 'img/nitrous.png', alt: 'Nitours IDE'
  end

end

step "Create a railbridge directory" do
  console "mkdir railsbridge"
  message "`mkdir` stands for make directory (folder)."
  message "We've made a folder called `railsbridge`."
end

step "Change to your new railsbridge directory" do
  console "cd railsbridge"
end

step "Create a new Rails app" do

  console "rails new test_app"

  message "The command's output is voluminous, and will take some time to complete, with a long pause in the middle, after all the 'create...' statements ending in 'bundle install'.  When it fully completes, it will return you to your home prompt.  Look for the 'Your bundle is complete!' message just above."

  console "cd test_app"
  console "rails server"

  tip "Shortcut: Just type 'rails s'" do
    message <<-MARKDOWN
Throughout your Rails programming career you're going to type `rails server` a
lot.  In fact, you'll type this so much that DHH and the Rails Core team
decided to save you 5 keystrokes per server restart.  Simply typing `rails s`
is the same as `rails server`.
  MARKDOWN
  end

  message <<-MARKDOWN
The first command ('cd test_app') should produce no output.
If `rails server` starts up with no errors, you're golden! It'll look something like this:
  MARKDOWN

  fuzzy_result <<-TEXT
=> Booting WEBrick
=> Rails 3.2{FUZZY}.x{/FUZZY} application starting in development on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
[2010-09-30 21:04:12] INFO  WEBrick 1.3.1
[2010-09-30 21:04:12] INFO  ruby 1.9{FUZZY}.3 (2012-11-10) [x86_64-darwin10.4.2]{/FUZZY}
[2010-09-30 21:04:12] INFO  WEBrick::HTTPServer#start: pid={FUZZY}24805{/FUZZY} port=3000
  TEXT

message "If it does, congratulations! You've successfully installed Ruby AND Rails and started your server."

tip "If it doesn't work, ask a TA for help."

message <<-MARKDOWN

* From the Nitrous IDE file menu choose "Preview > Port 3000" and you should see something similar to this appear in a new browser tab:

![Successful Rails Install](img/successful-rails-install.jpg)

* Back in the Terminal window where you ran <code>rails server</code>, type **Control-C** (don't type this into the console, but hold the Control and C keys at the same time) to kill(stop) the server.

  MARKDOWN
  end

step "Generate a database model" do
  tip "If your prompt doesn't already show that you are (still) in the test_app folder" do
    console "cd test_app"
  end

  console <<-BASH
rails generate scaffold user name:string email:string address:text active:boolean
  BASH
  console <<-BASH
rake db:migrate
  BASH
end

step "Set the root route" do
  message "Use Nitrous' file browser to open the file 'railsbridge/test_app/config/routes.rb' and find the line containing:"

  source_code :ruby, <<-RUBY
# root 'welcome#index'
  RUBY

  message "Remove this line and replace it with:"

  source_code :ruby, <<-RUBY
root 'users#index'
  RUBY
end

step "Test your app!" do
  console "rails server"

  message "**Note:** the above are three separate commands. Type each line into the terminal separately, not as one single command."

  message "Wait until your console shows that the Webrick server has started (just like before).  Then preview the app in your browser (Preview > Port 3000 from the Nitours IDE menu)."

  message "Click *New user* to create a user to make sure we can save to the database.  Click *Back* to see your results. (The window where you ran `rails server` will display debugging information as you do so.)"

  message "In your Terminal window where you ran `rails server`, type Control-C (or Control-Break,Y) to kill(stop) the server."
end

step "Use git" do
  tip "If your prompt doesn't already show that you are (still) in the test_app folder" do
    console "cd test_app"
  end

  console <<-BASH
git init
  BASH

  result "Initialized empty Git repository in /home/action/railsbridge/test_app/.git/"

  console "git config --global user.email \"your email address\""

  console "git config --global user.name \"Your Name\""

  console "git add -A"
  tip "git add" do
    message <<-MARKDOWN
With Git, there are usually many ways to do very similar things.

  * `git add foo.txt` adds a file named `foo.txt`
  * `git add .` ("git add dot") adds all new files and changed files, but *keeps* files that you've deleted
  * `git add -A` adds everything, including deletions

"Adding deletions" may sound weird, but if you think of a version control system as keeping track of *changes*, it might make more sense.

    MARKDOWN
  end

  console "git commit -m \"initial commit\""
  result "a lot of lines like create mode 100644 Gemfile"

  console "git log"
  result "(Your git name and \"initial commit\" message.)"
end

next_step "get_a_sticker"
